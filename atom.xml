<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hexzhou.github.io/</id>
    <title>Hex&apos;s Blog</title>
    <updated>2020-11-20T13:10:57.043Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hexzhou.github.io/"/>
    <link rel="self" href="https://hexzhou.github.io/atom.xml"/>
    <subtitle>博学深思，明辨笃行</subtitle>
    <logo>https://hexzhou.github.io/images/avatar.png</logo>
    <icon>https://hexzhou.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Hex&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[如何在氧OS打开一加时钟的法定工作日(跳过节假日)功能]]></title>
        <id>https://hexzhou.github.io/post/ru-he-zai-yang-os-da-kai-yi-jia-shi-zhong-de-fa-ding-gong-zuo-ri-tiao-guo-jie-jia-ri-gong-neng/</id>
        <link href="https://hexzhou.github.io/post/ru-he-zai-yang-os-da-kai-yi-jia-shi-zhong-de-fa-ding-gong-zuo-ri-tiao-guo-jie-jia-ri-gong-neng/">
        </link>
        <updated>2020-11-20T12:01:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="准备工作">准备工作</h3>
<ol>
<li>手机开启bootloader</li>
<li>刷入magisk用于安装必要模块和获取root权限</li>
<li>Play Store安装ApkExtractor用于提取时钟apk</li>
<li>一台配置了Java环境的Win PC</li>
</ol>
<h3 id="过程">过程</h3>
<ol>
<li>
<p>首先打开ApkExtractor，找到<code>时钟</code>应用，包名为<code>com.oneplus.deskclock</code>，点击旁边菜单，选择<code>分享</code><br>
<img src="https://hexzhou.github.io//post-images/1605874073702.jpg" alt="" loading="lazy"><br>
提取的APK所在路径，可以在右上角设置菜单查看<br>
<img src="https://hexzhou.github.io//post-images/1605874214935.jpg" alt="" loading="lazy"><br>
<img src="https://hexzhou.github.io//post-images/1605874223166.jpg" alt="" loading="lazy"><br>
在对应路径下，找到APK，并将APK导入PC</p>
</li>
<li>
<p>然后在PC上下载<code>AndroidKiller_v1.3.1.zip</code>(https://down.52pojie.cn/Tools/Android_Tools/)，解压该压缩包。同时下载最新版<code>apktool</code>(https://bitbucket.org/iBotPeaches/apktool/downloads/)。<code>AndroidKiller 1.3.1</code>内置的apktool太旧，会导致反编译错误。</p>
</li>
<li>
<p>打开<code>AndroidKiller.exe</code>，选择最上面的<code>Android</code>菜单，点击<code>APKTOOL</code>管理器，将我下载好的<code>apktool.jar</code> 添加进去<br>
<img src="https://hexzhou.github.io//post-images/1605874881181.png" alt="" loading="lazy"><br>
选择默认的ApkTool版本为我们新添加的版本<br>
<img src="https://hexzhou.github.io//post-images/1605874887653.png" alt="" loading="lazy"></p>
</li>
<li>
<p>选择<code>主页</code>菜单，点击<code>打开</code>，选择我们从手机上导出来的时钟Apk.<br>
<img src="https://hexzhou.github.io//post-images/1605875052797.png" alt="" loading="lazy"><br>
稍作等待后，提示<code>APK 反编译完成!</code>即可，对于<code>APK 源码反编译失败!</code>我们暂时忽略<br>
<img src="https://hexzhou.github.io//post-images/1605875208858.png" alt="" loading="lazy"></p>
</li>
<li>
<p>左边菜单，选择<code>工程管理器</code>，依次展开<code>smali_classes5</code> -&gt; <code>com</code> -&gt; <code>oneplus</code> -&gt; <code>deskclock</code> -&gt; <code>picker</code>。找到<code>PickerUtils.smali</code>，双击打开<code>PickerUtils.smali</code>，滚到最下面，找到<code>.method public static isH2()Z</code>方法<br>
将其中的</p>
</li>
</ol>
<pre><code>.method public static isH2()Z
    .locals 1

    .line 28
    invoke-static {}, Lcom/oneplus/deskclock/Utils;-&gt;isH2()Z

    move-result v0

    return v0
.end method
</code></pre>
<p>修改成</p>
<pre><code>.method public static isH2()Z
    .locals 1

    .line 28
    const/4 v0, 0x1

    return v0
.end method
</code></pre>
<p>并保存。<br>
<img src="https://hexzhou.github.io//post-images/1605876089271.png" alt="" loading="lazy"></p>
<blockquote>
<p>该段代码逻辑，实际是调用一个静态方法判断当前系统是不是氢OS，然后进行返回。如果不是氢OS，就不会显示<code>法定工作日</code>的选项，所以我们只要把这个方法，修改成强制返回<code>const/4 v0, 0x1</code>，时钟就会判定成是氢OS，从而打到目的。</p>
</blockquote>
<ol start="6">
<li>在修改后，我们需要进行编译，选择<code>Android</code>菜单，点击<code>编译</code>。发现<code>APK编译失败</code>，错误如下</li>
</ol>
<pre><code>   正在编译 APK，请稍等...
&gt;I: Using Apktool 2.4.1
&gt;I: Smaling smali folder into classes.dex...
&gt;I: Smaling smali_classes2 folder into classes2.dex...
&gt;I: Smaling smali_classes3 folder into classes3.dex...
&gt;I: Smaling smali_classes4 folder into classes4.dex...
&gt;I: Smaling smali_classes5 folder into classes5.dex...
&gt;I: Building resources...
&gt;W: D:\apk\AndroidKiller\projects\DeskClock\Project\res\values\styles.xml:926: error: Resource entry CitiesTheme already has bag item onePlusActionbarBackgroundColor.
&gt;W: D:\apk\AndroidKiller\projects\DeskClock\Project\res\values\styles.xml:925: Originally defined here.
&gt;W: 
&gt;brut.androlib.AndrolibException: brut.common.BrutException: could not exec (exit code = 1): [C:\Users\GZZHOU~1\AppData\Local\Temp\brut_util_Jar_4336882941068523831.tmp, p, --forced-package-id, 127, --min-sdk-version, 29, --target-sdk-version, 29, --version-code, 530, --version-name, 5.3.0, --no-version-vectors, -F, C:\Users\GZZHOU~1\AppData\Local\Temp\APKTOOL1039353466293257463.tmp, -e, C:\Users\GZZHOU~1\AppData\Local\Temp\APKTOOL8918995624491212644.tmp, -0, arsc, -I, C:\Users\gzzhoukaihuan\AppData\Local\apktool\framework\1.apk, -S, D:\apk\AndroidKiller\projects\DeskClock\Project\res, -M, D:\apk\AndroidKiller\projects\DeskClock\Project\AndroidManifest.xml]
APK 编译失败，无法继续下一步签名!
</code></pre>
<p>原因是<code>\DeskClock\Project\res\values\styles.xml</code>这个文件，有一个变量定义重复了。依次展开<code>res</code> -&gt; <code>values</code>，找到并双击打开<code>styles.xml</code>，找到错误提示的925行，删除掉其中重复的一行后保存。<br>
<img src="https://hexzhou.github.io//post-images/1605876232466.png" alt="" loading="lazy"><br>
删除掉925行或者926后，保存，再点击<code>编译</code><br>
<img src="https://hexzhou.github.io//post-images/1605876385968.png" alt="" loading="lazy"><br>
编译完成后，还会自动签名。<em><strong>将编译完成的APK，导入手机。</strong></em></p>
<ol start="7">
<li>现在修改版的时钟应用已经弄好了，只剩下如何替换掉系统内的原有的时钟应用了。我这边采用的方法使用<code>App Systemizer</code>讲替换安装到系统分区。<br>
具体操作为<br>
a. 是先下载<code>Root Explorer</code>，我们俗称的<code>RE文件管理器</code>。给予RE文件管理器ROOT权限后，进入<code>/system/app</code>目录，<code>挂载为可读写</code>后，删除<code>DeskClock</code>文件后，重启。重启后，时钟应用就消失了。<br>
b. <code>magisk</code>搜索安装<code>App Systemizer</code>模块和<code>BusyBox for Android NDK</code>模块，重启。<br>
c. 在Play Store安装<code>Termux</code>后，运行<code>Termux</code>，输入<code>su</code> 获取root权限，再输入<code>systemize</code>，然后输入<code>3</code>，输入从电脑导入到手机上的修改版时钟应用的路径，比如我的是<code>/sdcard/clock.apk。安装完成后，重启。 d. 最后就能在手机应用列表看到新的时钟应用，且有</code>法定工作日`的选项。<br>
<img src="https://hexzhou.github.io//post-images/1605877666824.jpg" alt="" loading="lazy"></li>
</ol>
<p>关于<code>App Systemizer</code>的安装使用，可以参考<a href="https://izaka.tw/magisk-app_systemizer-guide/">这篇文章</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL中纵表的运用]]></title>
        <id>https://hexzhou.github.io/post/mysql-vertical-table/</id>
        <link href="https://hexzhou.github.io/post/mysql-vertical-table/">
        </link>
        <updated>2019-09-10T08:39:24.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="起因">起因</h3>
<p>因为需求的迭代，用户表每过一段时间就需要添加一些字段。但是用户表数据量较大且在业务时间更新十分频繁。在业务频繁的时候，如果执行Alter Table这些DDL语句，可能会导致出现大量的waitting for table metadata lock锁住表，继而导致用户数据读写受到影响、服务不可用。<br>
那么如何解决这种时不时要给用户添加新字段的情况呢。我们可以考虑使用纵表。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="起因">起因</h3>
<p>因为需求的迭代，用户表每过一段时间就需要添加一些字段。但是用户表数据量较大且在业务时间更新十分频繁。在业务频繁的时候，如果执行Alter Table这些DDL语句，可能会导致出现大量的waitting for table metadata lock锁住表，继而导致用户数据读写受到影响、服务不可用。<br>
那么如何解决这种时不时要给用户添加新字段的情况呢。我们可以考虑使用纵表。</p>
 <!-- more --> 
<h3 id="什么是纵表">什么是纵表</h3>
<p>横表是我们最经常使用的建表方式，既结构为<code>主键、字段1、字段2、字段3。。。</code>。而纵表呢，其结构为<code>主键、字段代码、字段值</code>。<br>
举个例子，学生和考试科目的关系。<br>
正常的横表建表方式应该是</p>
<table>
<thead>
<tr>
<th>学生名称</th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
<th>生物</th>
<th>...</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>90</td>
<td>90</td>
<td>90</td>
<td>90</td>
<td>...</td>
</tr>
<tr>
<td>B</td>
<td>90</td>
<td>90</td>
<td>90</td>
<td>90</td>
<td>...</td>
</tr>
<tr>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<p>优点：一行表示了一个实体记录，清晰可见，一目了然。<br>
缺点：如果现在要把这个表加一个字段，那么就必须重建表结构。</p>
<p>而使用纵表的建表方式，则为</p>
<table>
<thead>
<tr>
<th>学生名称</th>
<th>科目</th>
<th>分数</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>语文</td>
<td>90</td>
</tr>
<tr>
<td>A</td>
<td>数学</td>
<td>90</td>
</tr>
<tr>
<td>A</td>
<td>英语</td>
<td>90</td>
</tr>
<tr>
<td>A</td>
<td>生物</td>
<td>90</td>
</tr>
<tr>
<td>A</td>
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<p>优点：如果现在要把这个表加一个字段，只需要添加一些记录。<br>
缺点：数据描述不是很清晰，而且会造成数据库数据很多（这个时候，最好将数据表分表处理来缓解数据膨胀）。</p>
<h3 id="应用">应用</h3>
<p>回到最开始的问题，我们需要解决给用户增加属性字段的问题。那么我们可以想到，大概结构为&quot;用户ID，字段，属性值&quot;。具体SQL语句如下：</p>
<pre><code>CREATE TABLE `user_extra` (
  `user_id` bigint(20) NOT NULL,
  `field` varchar(50) NOT NULL,
  `value` varchar(255) DEFAULT NULL,
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`user_id`,`field`),
  KEY `idx_field_value` (`field`,`value`) 
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='用户特定信息详情表';
</code></pre>
<p>特别点：</p>
<ol>
<li>我们定义主键时，使用<code>userId</code>和<code>field</code>，这样子一来能加快通过<code>userId</code>和<code>field</code>查询<code>value</code>的速度，二来保证<code>userId</code>和<code>field</code>的关系唯一。</li>
<li>我们加了一个<code>create_time</code>用于标识字段属性创建的时间，在需要查询某个用户设定该字段是什么时候时能起到作用</li>
<li>为什么还需要<code>field</code>和<code>value</code>值的索引呢？一个很实际的场景：查询具有某个属性=某个值的所有用户(<code>select user_id where field='xxx' and value='xxx'</code>)。这种情况下，就需要<code>idx_field_value</code>来加快查询速度</li>
<li>对于该表，还能进行一个优化，就是将<code>field</code>字段设定成<code>int</code>类型，然后使用一个字典来保存field字段的可能值。<br>
比如上面学生考试科目的场景，可以将科目存储为<code>{1: &quot;语文&quot;, 2:&quot;数学&quot;, 3: &quot;英语&quot;}</code>, 每条记录就变成</li>
</ol>
<table>
<thead>
<tr>
<th>学生名称</th>
<th>科目</th>
<th>分数</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>1</td>
<td>90</td>
</tr>
</tbody>
</table>
<p>这样子，虽然可读性有所下降，但是存储所占用的空间就会减少，且理论上，查询匹配速度更快一点。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Python批量SSH登录服务器执行命令]]></title>
        <id>https://hexzhou.github.io/post/python-exec-cmd-over-ssh/</id>
        <link href="https://hexzhou.github.io/post/python-exec-cmd-over-ssh/">
        </link>
        <updated>2019-07-16T08:00:59.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="目的">目的</h3>
<p>有多台服务器运行着实例代码，需要登录上去抓取指定日志，然后进行分析。如果一台一台机器登录拿日志处理太过费时间，所以要写一个脚本来处理。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="目的">目的</h3>
<p>有多台服务器运行着实例代码，需要登录上去抓取指定日志，然后进行分析。如果一台一台机器登录拿日志处理太过费时间，所以要写一个脚本来处理。</p>
 <!-- more --> 
<h3 id="paramiko模块">Paramiko模块</h3>
<p>paramiko是用python语言写的一个模块，遵循SSH2协议，支持以加密和认证的方式，进行远程服务器的连接。paramiko支持Linux, Solaris, BSD, MacOS X, Windows等平台通过SSH从一个平台连接到另外一个平台。利用该模块，可以方便的进行ssh连接和sftp协议进行sftp文件传输。</p>
<pre><code>
// 安装
pip install paramiko 
</code></pre>
<h3 id="示例代码">示例代码</h3>
<pre><code>
#!/usr/bin/python
# -*- coding:utf-8 -*-

import paramiko

# 登录服务器，并执行代码
def sshclient_execmd(hostname, port, username, key, execmd):
	# paramiko 的操作日志，方便排查问题
	paramiko.util.log_to_file(&quot;paramiko.log&quot;)

	# 创建SSHClient
	s = paramiko.SSHClient()
	s.set_missing_host_key_policy(paramiko.AutoAddPolicy())

	# 这里是使用 rsa 登录的方式要传一个 privateKey进来
	# 通过key = paramiko.RSAKey.from_private_key_file(pkey)
	# 也可以使用账号密码的登录方式
	s.connect(hostname=hostname, port=port, username=username, pkey=key)

	#`执行命令得到输出
	stdin, stdout, stderr = s.exec_command(execmd)

	# 有些时候可能需要输入Y确定操作
	# stdin.write(&quot;Y&quot;)  # Generally speaking, the first connection, need a simple interaction.

	## 读取输出
	output = stdout.read()

	### 操作完毕需要关闭client
	s.close()

	return output

	# 这里是根据输出做统计分析的代码
def statics(output):
	pass

def main():
	# 服务器相关的SSH信息
	hostnames = ['xxx', 'xxx', 'xxx']
	port = 22
	username = 'username'

	# 通过RSA PrivateKey文件读取Key
	pkey = 'D:/id_rsa'
	key = paramiko.RSAKey.from_private_key_file(pkey)
    
	# 要执行的命令
	execmd = &quot;&quot;&quot;free -h&quot;&quot;&quot;
	output = &quot;&quot;
	for hostname in hostnames:
			output += sshclient_execmd(hostname, port, username, key, execmd).
	# 将输出做分析处理
	statics(output)

if __name__ == &quot;__main__&quot;:
	main()
</code></pre>
<h2 id="其他工具-polysh">其他工具 Polysh</h2>
<p><a href="http://guichaz.free.fr/polysh/">Polysh</a> 可以同时登陆多台服务器，然后批量执行命令</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springmvc项目中，通过maven使用本地jar包]]></title>
        <id>https://hexzhou.github.io/post/add-local-jar-files-in-maven-project/</id>
        <link href="https://hexzhou.github.io/post/add-local-jar-files-in-maven-project/">
        </link>
        <updated>2017-01-18T08:13:48.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="起因">起因</h2>
<p>项目所有的jar包都使用maven repository私服，所以如果有新的第三方包，就需要先上传上去私服才能使用，但是需要<br>
一些时间。可是开发进度不等人，所以要想办法直接在项目中使用第三方包。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="起因">起因</h2>
<p>项目所有的jar包都使用maven repository私服，所以如果有新的第三方包，就需要先上传上去私服才能使用，但是需要<br>
一些时间。可是开发进度不等人，所以要想办法直接在项目中使用第三方包。</p>
<!-- more -->
<h2 id="解决办法一">解决办法一</h2>
<p>在pom.xml文件中添加</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.yourgroup&lt;/groupId&gt;
    &lt;artifactId&gt;yourartifactId&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;scope&gt;system&lt;/scope&gt;
    &lt;systemPath&gt;${project.basedir}/lib/xxx.jar&lt;/systemPath&gt;
&lt;/dependency&gt;
</code></pre>
<p>其中groupId、artifactId和version对应的值都可以随便填写，然后systemPath填写jar对应的路径</p>
<pre><code>${project.basedir}/lib/xxx.jar
对应的文件目录架构如下
- |project
-- |src
--- |main
-- |lib
--- | xxx.jar
</code></pre>
<p>添加了这个依赖之后，intelliJ 就可以在开发的时候，索引到依赖。<br>
可是，当运行项目和用maven进行打包时，无法将该jar包打到项目内，导致无法找到对应的类。<br>
解决办法是在pom.xml中加入</p>
<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.6&lt;/version&gt;
    &lt;configuration&gt;
        &lt;warName&gt;${project.artifactId}&lt;/warName&gt;
        &lt;webResources&gt;
            &lt;resource&gt;
                &lt;directory&gt;/lib&lt;/directory&gt;
                &lt;targetPath&gt;WEB-INF/lib&lt;/targetPath&gt;
                &lt;includes&gt;
                    &lt;include&gt;**/*.jar&lt;/include&gt;
                &lt;/includes&gt;
            &lt;/resource&gt;
         &lt;/webResources&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>
<p>意思是增加一个maven打包的插件，把/lib目录下的jar文件都进行打包。</p>
<h2 id="解决办法二">解决办法二</h2>
<p>可以把jar包放到<code>src/main/java/webapp/WEB-INF/lib/</code>下，然后在pom.xml中加入</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.yourgroup&lt;/groupId&gt;
    &lt;artifactId&gt;yourartifactId&lt;/artifactId&gt;
    &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;scope&gt;system&lt;/scope&gt;
    &lt;systemPath&gt;${project.basedir}/src/main/webapp/WEB-INF/lib/xxx.jar&lt;/systemPath&gt;
&lt;/dependency&gt;
</code></pre>
<p>这样子，就可以不需要像方法一一样加入maven打包插件了</p>
<h2 id="后记">后记</h2>
<p>其实在pom.xml声明system级别的scope是十分不推荐的行为，是evil的。</p>
<blockquote>
<p>System scope was only designed to deal with 'system' files; files sitting in some fixed location. Files in  /usr/lib, or ${java.home} (e.g. tools.jar). It wasn't designed to support miscellaneous .jar files in your project.</p>
</blockquote>
<p>后面将jar包导入到私服后，就可以将上面的配置删除掉了。</p>
]]></content>
    </entry>
</feed>